# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_COWN_swig', [dirname(__file__)])
        except ImportError:
            import _COWN_swig
            return _COWN_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_COWN_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _COWN_swig = swig_import_helper()
    del swig_import_helper
else:
    import _COWN_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _COWN_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _COWN_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _COWN_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _COWN_swig.high_res_timer_epoch()
class tag_generator(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> tag_generator_sptr

        Return a shared_ptr to a new instance of COWN::tag_generator.

        To avoid accidental use of raw pointers, COWN::tag_generator's constructor is in a private implementation class. COWN::tag_generator::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _COWN_swig.tag_generator_make()

    make = staticmethod(make)
    __swig_destroy__ = _COWN_swig.delete_tag_generator
    __del__ = lambda self : None;
tag_generator_swigregister = _COWN_swig.tag_generator_swigregister
tag_generator_swigregister(tag_generator)

def tag_generator_make():
  """
    tag_generator_make() -> tag_generator_sptr

    Return a shared_ptr to a new instance of COWN::tag_generator.

    To avoid accidental use of raw pointers, COWN::tag_generator's constructor is in a private implementation class. COWN::tag_generator::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _COWN_swig.tag_generator_make()

class tag_generator_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::COWN::tag_generator)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::COWN::tag_generator)> self) -> tag_generator_sptr
        __init__(boost::shared_ptr<(gr::COWN::tag_generator)> self, tag_generator p) -> tag_generator_sptr
        """
        this = _COWN_swig.new_tag_generator_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(tag_generator_sptr self) -> tag_generator"""
        return _COWN_swig.tag_generator_sptr___deref__(self)

    __swig_destroy__ = _COWN_swig.delete_tag_generator_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(tag_generator_sptr self) -> tag_generator_sptr

        Return a shared_ptr to a new instance of COWN::tag_generator.

        To avoid accidental use of raw pointers, COWN::tag_generator's constructor is in a private implementation class. COWN::tag_generator::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _COWN_swig.tag_generator_sptr_make(self)

    def history(self):
        """history(tag_generator_sptr self) -> unsigned int"""
        return _COWN_swig.tag_generator_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(tag_generator_sptr self, int which, int delay)
        declare_sample_delay(tag_generator_sptr self, unsigned int delay)
        """
        return _COWN_swig.tag_generator_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(tag_generator_sptr self, int which) -> unsigned int"""
        return _COWN_swig.tag_generator_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(tag_generator_sptr self) -> int"""
        return _COWN_swig.tag_generator_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(tag_generator_sptr self) -> double"""
        return _COWN_swig.tag_generator_sptr_relative_rate(self)

    def start(self):
        """start(tag_generator_sptr self) -> bool"""
        return _COWN_swig.tag_generator_sptr_start(self)

    def stop(self):
        """stop(tag_generator_sptr self) -> bool"""
        return _COWN_swig.tag_generator_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(tag_generator_sptr self, unsigned int which_input) -> uint64_t"""
        return _COWN_swig.tag_generator_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(tag_generator_sptr self, unsigned int which_output) -> uint64_t"""
        return _COWN_swig.tag_generator_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(tag_generator_sptr self) -> int"""
        return _COWN_swig.tag_generator_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(tag_generator_sptr self, int m)"""
        return _COWN_swig.tag_generator_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(tag_generator_sptr self)"""
        return _COWN_swig.tag_generator_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(tag_generator_sptr self) -> bool"""
        return _COWN_swig.tag_generator_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(tag_generator_sptr self, int m)"""
        return _COWN_swig.tag_generator_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(tag_generator_sptr self) -> int"""
        return _COWN_swig.tag_generator_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(tag_generator_sptr self, int i) -> long"""
        return _COWN_swig.tag_generator_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(tag_generator_sptr self, long max_output_buffer)
        set_max_output_buffer(tag_generator_sptr self, int port, long max_output_buffer)
        """
        return _COWN_swig.tag_generator_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(tag_generator_sptr self, int i) -> long"""
        return _COWN_swig.tag_generator_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(tag_generator_sptr self, long min_output_buffer)
        set_min_output_buffer(tag_generator_sptr self, int port, long min_output_buffer)
        """
        return _COWN_swig.tag_generator_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(tag_generator_sptr self, int which) -> float
        pc_input_buffers_full(tag_generator_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.tag_generator_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(tag_generator_sptr self, int which) -> float
        pc_input_buffers_full_avg(tag_generator_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.tag_generator_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(tag_generator_sptr self, int which) -> float
        pc_input_buffers_full_var(tag_generator_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.tag_generator_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(tag_generator_sptr self, int which) -> float
        pc_output_buffers_full(tag_generator_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.tag_generator_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(tag_generator_sptr self, int which) -> float
        pc_output_buffers_full_avg(tag_generator_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.tag_generator_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(tag_generator_sptr self, int which) -> float
        pc_output_buffers_full_var(tag_generator_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.tag_generator_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(tag_generator_sptr self) -> float"""
        return _COWN_swig.tag_generator_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(tag_generator_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _COWN_swig.tag_generator_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(tag_generator_sptr self)"""
        return _COWN_swig.tag_generator_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(tag_generator_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _COWN_swig.tag_generator_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(tag_generator_sptr self) -> int"""
        return _COWN_swig.tag_generator_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(tag_generator_sptr self) -> int"""
        return _COWN_swig.tag_generator_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(tag_generator_sptr self, int priority) -> int"""
        return _COWN_swig.tag_generator_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(tag_generator_sptr self) -> std::string"""
        return _COWN_swig.tag_generator_sptr_name(self)

    def symbol_name(self):
        """symbol_name(tag_generator_sptr self) -> std::string"""
        return _COWN_swig.tag_generator_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(tag_generator_sptr self) -> io_signature_sptr"""
        return _COWN_swig.tag_generator_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(tag_generator_sptr self) -> io_signature_sptr"""
        return _COWN_swig.tag_generator_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(tag_generator_sptr self) -> long"""
        return _COWN_swig.tag_generator_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(tag_generator_sptr self) -> basic_block_sptr"""
        return _COWN_swig.tag_generator_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(tag_generator_sptr self, int ninputs, int noutputs) -> bool"""
        return _COWN_swig.tag_generator_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(tag_generator_sptr self) -> std::string"""
        return _COWN_swig.tag_generator_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(tag_generator_sptr self, std::string name)"""
        return _COWN_swig.tag_generator_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(tag_generator_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _COWN_swig.tag_generator_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(tag_generator_sptr self) -> swig_int_ptr"""
        return _COWN_swig.tag_generator_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(tag_generator_sptr self) -> swig_int_ptr"""
        return _COWN_swig.tag_generator_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(tag_generator_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _COWN_swig.tag_generator_sptr_message_subscribers(self, *args, **kwargs)

tag_generator_sptr_swigregister = _COWN_swig.tag_generator_sptr_swigregister
tag_generator_sptr_swigregister(tag_generator_sptr)

tag_generator_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
tag_generator = tag_generator.make;

class test(object):
    """Proxy of C++ gr::COWN::test class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> test_sptr"""
        return _COWN_swig.test_make()

    make = staticmethod(make)
    __swig_destroy__ = _COWN_swig.delete_test
    __del__ = lambda self : None;
test_swigregister = _COWN_swig.test_swigregister
test_swigregister(test)

def test_make():
  """test_make() -> test_sptr"""
  return _COWN_swig.test_make()

class test_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::COWN::test)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::COWN::test)> self) -> test_sptr
        __init__(boost::shared_ptr<(gr::COWN::test)> self, test p) -> test_sptr
        """
        this = _COWN_swig.new_test_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(test_sptr self) -> test"""
        return _COWN_swig.test_sptr___deref__(self)

    __swig_destroy__ = _COWN_swig.delete_test_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(test_sptr self) -> test_sptr"""
        return _COWN_swig.test_sptr_make(self)

    def history(self):
        """history(test_sptr self) -> unsigned int"""
        return _COWN_swig.test_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(test_sptr self, int which, int delay)
        declare_sample_delay(test_sptr self, unsigned int delay)
        """
        return _COWN_swig.test_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(test_sptr self, int which) -> unsigned int"""
        return _COWN_swig.test_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(test_sptr self) -> int"""
        return _COWN_swig.test_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(test_sptr self) -> double"""
        return _COWN_swig.test_sptr_relative_rate(self)

    def start(self):
        """start(test_sptr self) -> bool"""
        return _COWN_swig.test_sptr_start(self)

    def stop(self):
        """stop(test_sptr self) -> bool"""
        return _COWN_swig.test_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(test_sptr self, unsigned int which_input) -> uint64_t"""
        return _COWN_swig.test_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(test_sptr self, unsigned int which_output) -> uint64_t"""
        return _COWN_swig.test_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(test_sptr self) -> int"""
        return _COWN_swig.test_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(test_sptr self, int m)"""
        return _COWN_swig.test_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(test_sptr self)"""
        return _COWN_swig.test_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(test_sptr self) -> bool"""
        return _COWN_swig.test_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(test_sptr self, int m)"""
        return _COWN_swig.test_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(test_sptr self) -> int"""
        return _COWN_swig.test_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(test_sptr self, int i) -> long"""
        return _COWN_swig.test_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(test_sptr self, long max_output_buffer)
        set_max_output_buffer(test_sptr self, int port, long max_output_buffer)
        """
        return _COWN_swig.test_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(test_sptr self, int i) -> long"""
        return _COWN_swig.test_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(test_sptr self, long min_output_buffer)
        set_min_output_buffer(test_sptr self, int port, long min_output_buffer)
        """
        return _COWN_swig.test_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(test_sptr self, int which) -> float
        pc_input_buffers_full(test_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.test_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(test_sptr self, int which) -> float
        pc_input_buffers_full_avg(test_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.test_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(test_sptr self, int which) -> float
        pc_input_buffers_full_var(test_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.test_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(test_sptr self, int which) -> float
        pc_output_buffers_full(test_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.test_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(test_sptr self, int which) -> float
        pc_output_buffers_full_avg(test_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.test_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(test_sptr self, int which) -> float
        pc_output_buffers_full_var(test_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.test_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(test_sptr self) -> float"""
        return _COWN_swig.test_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(test_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _COWN_swig.test_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(test_sptr self)"""
        return _COWN_swig.test_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(test_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _COWN_swig.test_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(test_sptr self) -> int"""
        return _COWN_swig.test_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(test_sptr self) -> int"""
        return _COWN_swig.test_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(test_sptr self, int priority) -> int"""
        return _COWN_swig.test_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(test_sptr self) -> std::string"""
        return _COWN_swig.test_sptr_name(self)

    def symbol_name(self):
        """symbol_name(test_sptr self) -> std::string"""
        return _COWN_swig.test_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(test_sptr self) -> io_signature_sptr"""
        return _COWN_swig.test_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(test_sptr self) -> io_signature_sptr"""
        return _COWN_swig.test_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(test_sptr self) -> long"""
        return _COWN_swig.test_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(test_sptr self) -> basic_block_sptr"""
        return _COWN_swig.test_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(test_sptr self, int ninputs, int noutputs) -> bool"""
        return _COWN_swig.test_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(test_sptr self) -> std::string"""
        return _COWN_swig.test_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(test_sptr self, std::string name)"""
        return _COWN_swig.test_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(test_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _COWN_swig.test_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(test_sptr self) -> swig_int_ptr"""
        return _COWN_swig.test_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(test_sptr self) -> swig_int_ptr"""
        return _COWN_swig.test_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(test_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _COWN_swig.test_sptr_message_subscribers(self, *args, **kwargs)

test_sptr_swigregister = _COWN_swig.test_sptr_swigregister
test_sptr_swigregister(test_sptr)

test_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
test = test.make;

class syncher(object):
    """Proxy of C++ gr::COWN::syncher class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> syncher_sptr"""
        return _COWN_swig.syncher_make()

    make = staticmethod(make)
    __swig_destroy__ = _COWN_swig.delete_syncher
    __del__ = lambda self : None;
syncher_swigregister = _COWN_swig.syncher_swigregister
syncher_swigregister(syncher)

def syncher_make():
  """syncher_make() -> syncher_sptr"""
  return _COWN_swig.syncher_make()

class syncher_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::COWN::syncher)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::COWN::syncher)> self) -> syncher_sptr
        __init__(boost::shared_ptr<(gr::COWN::syncher)> self, syncher p) -> syncher_sptr
        """
        this = _COWN_swig.new_syncher_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(syncher_sptr self) -> syncher"""
        return _COWN_swig.syncher_sptr___deref__(self)

    __swig_destroy__ = _COWN_swig.delete_syncher_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(syncher_sptr self) -> syncher_sptr"""
        return _COWN_swig.syncher_sptr_make(self)

    def history(self):
        """history(syncher_sptr self) -> unsigned int"""
        return _COWN_swig.syncher_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(syncher_sptr self, int which, int delay)
        declare_sample_delay(syncher_sptr self, unsigned int delay)
        """
        return _COWN_swig.syncher_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(syncher_sptr self, int which) -> unsigned int"""
        return _COWN_swig.syncher_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(syncher_sptr self) -> int"""
        return _COWN_swig.syncher_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(syncher_sptr self) -> double"""
        return _COWN_swig.syncher_sptr_relative_rate(self)

    def start(self):
        """start(syncher_sptr self) -> bool"""
        return _COWN_swig.syncher_sptr_start(self)

    def stop(self):
        """stop(syncher_sptr self) -> bool"""
        return _COWN_swig.syncher_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(syncher_sptr self, unsigned int which_input) -> uint64_t"""
        return _COWN_swig.syncher_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(syncher_sptr self, unsigned int which_output) -> uint64_t"""
        return _COWN_swig.syncher_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(syncher_sptr self) -> int"""
        return _COWN_swig.syncher_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(syncher_sptr self, int m)"""
        return _COWN_swig.syncher_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(syncher_sptr self)"""
        return _COWN_swig.syncher_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(syncher_sptr self) -> bool"""
        return _COWN_swig.syncher_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(syncher_sptr self, int m)"""
        return _COWN_swig.syncher_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(syncher_sptr self) -> int"""
        return _COWN_swig.syncher_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(syncher_sptr self, int i) -> long"""
        return _COWN_swig.syncher_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(syncher_sptr self, long max_output_buffer)
        set_max_output_buffer(syncher_sptr self, int port, long max_output_buffer)
        """
        return _COWN_swig.syncher_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(syncher_sptr self, int i) -> long"""
        return _COWN_swig.syncher_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(syncher_sptr self, long min_output_buffer)
        set_min_output_buffer(syncher_sptr self, int port, long min_output_buffer)
        """
        return _COWN_swig.syncher_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(syncher_sptr self, int which) -> float
        pc_input_buffers_full(syncher_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(syncher_sptr self, int which) -> float
        pc_input_buffers_full_avg(syncher_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(syncher_sptr self, int which) -> float
        pc_input_buffers_full_var(syncher_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(syncher_sptr self, int which) -> float
        pc_output_buffers_full(syncher_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(syncher_sptr self, int which) -> float
        pc_output_buffers_full_avg(syncher_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(syncher_sptr self, int which) -> float
        pc_output_buffers_full_var(syncher_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(syncher_sptr self) -> float"""
        return _COWN_swig.syncher_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(syncher_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _COWN_swig.syncher_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(syncher_sptr self)"""
        return _COWN_swig.syncher_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(syncher_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _COWN_swig.syncher_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(syncher_sptr self) -> int"""
        return _COWN_swig.syncher_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(syncher_sptr self) -> int"""
        return _COWN_swig.syncher_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(syncher_sptr self, int priority) -> int"""
        return _COWN_swig.syncher_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(syncher_sptr self) -> std::string"""
        return _COWN_swig.syncher_sptr_name(self)

    def symbol_name(self):
        """symbol_name(syncher_sptr self) -> std::string"""
        return _COWN_swig.syncher_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(syncher_sptr self) -> io_signature_sptr"""
        return _COWN_swig.syncher_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(syncher_sptr self) -> io_signature_sptr"""
        return _COWN_swig.syncher_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(syncher_sptr self) -> long"""
        return _COWN_swig.syncher_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(syncher_sptr self) -> basic_block_sptr"""
        return _COWN_swig.syncher_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(syncher_sptr self, int ninputs, int noutputs) -> bool"""
        return _COWN_swig.syncher_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(syncher_sptr self) -> std::string"""
        return _COWN_swig.syncher_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(syncher_sptr self, std::string name)"""
        return _COWN_swig.syncher_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(syncher_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _COWN_swig.syncher_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(syncher_sptr self) -> swig_int_ptr"""
        return _COWN_swig.syncher_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(syncher_sptr self) -> swig_int_ptr"""
        return _COWN_swig.syncher_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(syncher_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _COWN_swig.syncher_sptr_message_subscribers(self, *args, **kwargs)

syncher_sptr_swigregister = _COWN_swig.syncher_sptr_swigregister
syncher_sptr_swigregister(syncher_sptr)

syncher_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
syncher = syncher.make;

class syncher2(object):
    """Proxy of C++ gr::COWN::syncher2 class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> syncher2_sptr"""
        return _COWN_swig.syncher2_make()

    make = staticmethod(make)
    __swig_destroy__ = _COWN_swig.delete_syncher2
    __del__ = lambda self : None;
syncher2_swigregister = _COWN_swig.syncher2_swigregister
syncher2_swigregister(syncher2)

def syncher2_make():
  """syncher2_make() -> syncher2_sptr"""
  return _COWN_swig.syncher2_make()

class syncher2_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::COWN::syncher2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::COWN::syncher2)> self) -> syncher2_sptr
        __init__(boost::shared_ptr<(gr::COWN::syncher2)> self, syncher2 p) -> syncher2_sptr
        """
        this = _COWN_swig.new_syncher2_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(syncher2_sptr self) -> syncher2"""
        return _COWN_swig.syncher2_sptr___deref__(self)

    __swig_destroy__ = _COWN_swig.delete_syncher2_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(syncher2_sptr self) -> syncher2_sptr"""
        return _COWN_swig.syncher2_sptr_make(self)

    def history(self):
        """history(syncher2_sptr self) -> unsigned int"""
        return _COWN_swig.syncher2_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(syncher2_sptr self, int which, int delay)
        declare_sample_delay(syncher2_sptr self, unsigned int delay)
        """
        return _COWN_swig.syncher2_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(syncher2_sptr self, int which) -> unsigned int"""
        return _COWN_swig.syncher2_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(syncher2_sptr self) -> int"""
        return _COWN_swig.syncher2_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(syncher2_sptr self) -> double"""
        return _COWN_swig.syncher2_sptr_relative_rate(self)

    def start(self):
        """start(syncher2_sptr self) -> bool"""
        return _COWN_swig.syncher2_sptr_start(self)

    def stop(self):
        """stop(syncher2_sptr self) -> bool"""
        return _COWN_swig.syncher2_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(syncher2_sptr self, unsigned int which_input) -> uint64_t"""
        return _COWN_swig.syncher2_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(syncher2_sptr self, unsigned int which_output) -> uint64_t"""
        return _COWN_swig.syncher2_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(syncher2_sptr self) -> int"""
        return _COWN_swig.syncher2_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(syncher2_sptr self, int m)"""
        return _COWN_swig.syncher2_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(syncher2_sptr self)"""
        return _COWN_swig.syncher2_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(syncher2_sptr self) -> bool"""
        return _COWN_swig.syncher2_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(syncher2_sptr self, int m)"""
        return _COWN_swig.syncher2_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(syncher2_sptr self) -> int"""
        return _COWN_swig.syncher2_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(syncher2_sptr self, int i) -> long"""
        return _COWN_swig.syncher2_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(syncher2_sptr self, long max_output_buffer)
        set_max_output_buffer(syncher2_sptr self, int port, long max_output_buffer)
        """
        return _COWN_swig.syncher2_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(syncher2_sptr self, int i) -> long"""
        return _COWN_swig.syncher2_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(syncher2_sptr self, long min_output_buffer)
        set_min_output_buffer(syncher2_sptr self, int port, long min_output_buffer)
        """
        return _COWN_swig.syncher2_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(syncher2_sptr self, int which) -> float
        pc_input_buffers_full(syncher2_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher2_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(syncher2_sptr self, int which) -> float
        pc_input_buffers_full_avg(syncher2_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher2_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(syncher2_sptr self, int which) -> float
        pc_input_buffers_full_var(syncher2_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher2_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(syncher2_sptr self, int which) -> float
        pc_output_buffers_full(syncher2_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher2_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(syncher2_sptr self, int which) -> float
        pc_output_buffers_full_avg(syncher2_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher2_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(syncher2_sptr self, int which) -> float
        pc_output_buffers_full_var(syncher2_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.syncher2_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(syncher2_sptr self) -> float"""
        return _COWN_swig.syncher2_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(syncher2_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _COWN_swig.syncher2_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(syncher2_sptr self)"""
        return _COWN_swig.syncher2_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(syncher2_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _COWN_swig.syncher2_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(syncher2_sptr self) -> int"""
        return _COWN_swig.syncher2_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(syncher2_sptr self) -> int"""
        return _COWN_swig.syncher2_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(syncher2_sptr self, int priority) -> int"""
        return _COWN_swig.syncher2_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(syncher2_sptr self) -> std::string"""
        return _COWN_swig.syncher2_sptr_name(self)

    def symbol_name(self):
        """symbol_name(syncher2_sptr self) -> std::string"""
        return _COWN_swig.syncher2_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(syncher2_sptr self) -> io_signature_sptr"""
        return _COWN_swig.syncher2_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(syncher2_sptr self) -> io_signature_sptr"""
        return _COWN_swig.syncher2_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(syncher2_sptr self) -> long"""
        return _COWN_swig.syncher2_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(syncher2_sptr self) -> basic_block_sptr"""
        return _COWN_swig.syncher2_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(syncher2_sptr self, int ninputs, int noutputs) -> bool"""
        return _COWN_swig.syncher2_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(syncher2_sptr self) -> std::string"""
        return _COWN_swig.syncher2_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(syncher2_sptr self, std::string name)"""
        return _COWN_swig.syncher2_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(syncher2_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _COWN_swig.syncher2_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(syncher2_sptr self) -> swig_int_ptr"""
        return _COWN_swig.syncher2_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(syncher2_sptr self) -> swig_int_ptr"""
        return _COWN_swig.syncher2_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(syncher2_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _COWN_swig.syncher2_sptr_message_subscribers(self, *args, **kwargs)

syncher2_sptr_swigregister = _COWN_swig.syncher2_sptr_swigregister
syncher2_sptr_swigregister(syncher2_sptr)

syncher2_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
syncher2 = syncher2.make;

class resta(object):
    """Proxy of C++ gr::COWN::resta class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """make() -> resta_sptr"""
        return _COWN_swig.resta_make()

    make = staticmethod(make)
    __swig_destroy__ = _COWN_swig.delete_resta
    __del__ = lambda self : None;
resta_swigregister = _COWN_swig.resta_swigregister
resta_swigregister(resta)

def resta_make():
  """resta_make() -> resta_sptr"""
  return _COWN_swig.resta_make()

class resta_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::COWN::resta)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::COWN::resta)> self) -> resta_sptr
        __init__(boost::shared_ptr<(gr::COWN::resta)> self, resta p) -> resta_sptr
        """
        this = _COWN_swig.new_resta_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(resta_sptr self) -> resta"""
        return _COWN_swig.resta_sptr___deref__(self)

    __swig_destroy__ = _COWN_swig.delete_resta_sptr
    __del__ = lambda self : None;
    def make(self):
        """make(resta_sptr self) -> resta_sptr"""
        return _COWN_swig.resta_sptr_make(self)

    def history(self):
        """history(resta_sptr self) -> unsigned int"""
        return _COWN_swig.resta_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(resta_sptr self, int which, int delay)
        declare_sample_delay(resta_sptr self, unsigned int delay)
        """
        return _COWN_swig.resta_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(resta_sptr self, int which) -> unsigned int"""
        return _COWN_swig.resta_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(resta_sptr self) -> int"""
        return _COWN_swig.resta_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(resta_sptr self) -> double"""
        return _COWN_swig.resta_sptr_relative_rate(self)

    def start(self):
        """start(resta_sptr self) -> bool"""
        return _COWN_swig.resta_sptr_start(self)

    def stop(self):
        """stop(resta_sptr self) -> bool"""
        return _COWN_swig.resta_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(resta_sptr self, unsigned int which_input) -> uint64_t"""
        return _COWN_swig.resta_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(resta_sptr self, unsigned int which_output) -> uint64_t"""
        return _COWN_swig.resta_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(resta_sptr self) -> int"""
        return _COWN_swig.resta_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(resta_sptr self, int m)"""
        return _COWN_swig.resta_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(resta_sptr self)"""
        return _COWN_swig.resta_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(resta_sptr self) -> bool"""
        return _COWN_swig.resta_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(resta_sptr self, int m)"""
        return _COWN_swig.resta_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(resta_sptr self) -> int"""
        return _COWN_swig.resta_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(resta_sptr self, int i) -> long"""
        return _COWN_swig.resta_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(resta_sptr self, long max_output_buffer)
        set_max_output_buffer(resta_sptr self, int port, long max_output_buffer)
        """
        return _COWN_swig.resta_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(resta_sptr self, int i) -> long"""
        return _COWN_swig.resta_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(resta_sptr self, long min_output_buffer)
        set_min_output_buffer(resta_sptr self, int port, long min_output_buffer)
        """
        return _COWN_swig.resta_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(resta_sptr self, int which) -> float
        pc_input_buffers_full(resta_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.resta_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(resta_sptr self, int which) -> float
        pc_input_buffers_full_avg(resta_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.resta_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(resta_sptr self, int which) -> float
        pc_input_buffers_full_var(resta_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.resta_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(resta_sptr self, int which) -> float
        pc_output_buffers_full(resta_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.resta_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(resta_sptr self, int which) -> float
        pc_output_buffers_full_avg(resta_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.resta_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(resta_sptr self, int which) -> float
        pc_output_buffers_full_var(resta_sptr self) -> pmt_vector_float
        """
        return _COWN_swig.resta_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(resta_sptr self) -> float"""
        return _COWN_swig.resta_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(resta_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _COWN_swig.resta_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(resta_sptr self)"""
        return _COWN_swig.resta_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(resta_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _COWN_swig.resta_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(resta_sptr self) -> int"""
        return _COWN_swig.resta_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(resta_sptr self) -> int"""
        return _COWN_swig.resta_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(resta_sptr self, int priority) -> int"""
        return _COWN_swig.resta_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(resta_sptr self) -> std::string"""
        return _COWN_swig.resta_sptr_name(self)

    def symbol_name(self):
        """symbol_name(resta_sptr self) -> std::string"""
        return _COWN_swig.resta_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(resta_sptr self) -> io_signature_sptr"""
        return _COWN_swig.resta_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(resta_sptr self) -> io_signature_sptr"""
        return _COWN_swig.resta_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(resta_sptr self) -> long"""
        return _COWN_swig.resta_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(resta_sptr self) -> basic_block_sptr"""
        return _COWN_swig.resta_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(resta_sptr self, int ninputs, int noutputs) -> bool"""
        return _COWN_swig.resta_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(resta_sptr self) -> std::string"""
        return _COWN_swig.resta_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(resta_sptr self, std::string name)"""
        return _COWN_swig.resta_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(resta_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _COWN_swig.resta_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(resta_sptr self) -> swig_int_ptr"""
        return _COWN_swig.resta_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(resta_sptr self) -> swig_int_ptr"""
        return _COWN_swig.resta_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(resta_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _COWN_swig.resta_sptr_message_subscribers(self, *args, **kwargs)

resta_sptr_swigregister = _COWN_swig.resta_sptr_swigregister
resta_sptr_swigregister(resta_sptr)

resta_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
resta = resta.make;



